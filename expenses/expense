#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @db = PG.connect(dbname:"rb185");
    setup_schema
    @result = @db.exec('SELECT * FROM expenses')
    @memo_length = 20
    @amount_length = 10
    @id_length = 4
    @created_on_length = 10
  end

  def setup_schema
    sql ="SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    result =  @db.exec_params(sql)
    if result.ntuples.zero?
      sql = "CREATE TABLE expenses (id SERIAL PRIMARY KEY, amount NUMERIC(6, 2), memo VARCHAR(100), created_on DATE NOT NULL DEFAULT CURRENT_DATE);"
      @db.exec_params(sql)
    end
  end

  def display_count(expenses)
    if expenses.zero?
      puts "There are no expenses."
    else
      puts "There " + (expenses == 1 ? "is" : "are") + 
           " #{expenses} " + 
           (expenses == 1 ? "expense." : "expenses.")
    end
  end

  def display_total(expenses, total)
    unless expenses.zero?
      puts '-' * (@memo_length + @amount_length + @id_length + @created_on_length)
      spaces = (' ' * (@id_length + @created_on_length + @amount_length - 'total'.length - (total.to_s.length) + 2))
      puts "Total" + spaces + total.to_s
    end
  end

  def list(to_display = @result)
    expenses = to_display.ntuples
    display_count(expenses)
    total = 0
    to_display.each do |tuple|
      puts "#{tuple['id']}".rjust(4) + 
           "|#{tuple['created_on']}|" + 
           "#{tuple['amount']}".rjust(10) + 
           "|#{tuple['memo']}".ljust(20)
      total += tuple['amount'].to_f
    end       
    total = total.round(2)
    display_total(expenses, total)
  end

  def add_expense(args)
    cost = args[1]
    memo = args[2]
    @db.exec_params("INSERT INTO expenses (created_on, amount, memo) VALUES (DEFAULT, $1, $2)", [cost, memo])
  end

  def search(term)
    result = @db.exec_params("SELECT * FROM expenses WHERE memo ILIKE $1", ["%#{term}%"])
    list(result)
  end

  def delete(id, clear = false)
    sql = @db.exec_params("SELECT * FROM expenses WHERE id = $1", ["#{id}"])
    if sql.ntuples == 0
      abort "That id doesn't exist"
    else
      @db.exec_params("DELETE FROM expenses WHERE id = $1", ["#{id}"])
      if clear
        puts "All expenses have been deleted"
      else
        puts "The following expense has been deleted: "
        list(sql)
      end
    end
  end

  def delete_all_expenses
    @db.exec_params("DELETE FROM expenses")
  end

  def clear
    puts "This will remove all expenses. Are you sure? (y/n) "
    choice = STDIN.getch
    if choice.downcase == 'y'
      delete_all_expenses
    end
  end
end

class CLI
  def initialize
    @data = ExpenseData.new
  end

  def run(args)
    if args.length.zero?
      help
    end
    case args[0]
    when 'list'
      @data.list
    when 'add'
      abort 'You must provide an amount and memo.' unless args[1]
      @data.add_expense(args)
    when 'search'
      @data.search(args[1])
    when 'delete'
      abort "You didn't say what to delete!" unless args[1]
      @data.delete(args[1])
    when 'clear'
      @data.clear
    end
  end

  def help
    puts(<<~LIST)
      An expense recording system

      Commands:
  
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    LIST
  end

end

CLI.new.run(ARGV)
